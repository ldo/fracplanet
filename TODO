- Needed for Debian "buster": use Qt5

- Suggestions from HolgerOhmacht:

1. missing equatorial mass distribution of rotational  spheric objects in space (by planet option)
2. snow option check box
3. maybe size of planet in textbox
4. missing zoom slider

- Suggestion from "floatingw" at 
  https://sourceforge.net/projects/fracplanet/forums/forum/239388/topic/3497745/index/page/1
  "I just realized that by saving the terrain and river seeds you're able to go back to a previous planet after you've pressed the "generate new seed" buttons. Still, I think that there ought to be a method to save all of the current settings in a custom fracplanet file format. That's probably in the roadmap and you just haven't gotten to it yet.

It also would be handy if the settings could be output as comments in the .pov and .py outputs; I now have several planets that I spent lots of time sifting through to find, but I only have the .pov, .py, and texture files for them because I didn't realize that I could just write down the seed numbers."

- Suggestion from StÃ©phane Mellerio:
  Commandline version of tool.  Unclear whether it would emit meshes or rendered images (or both).

- stopping flying should hold position and allow spin and tilt manipulation
  (have planet rotate under current viewpoint)
- cancel button on progress bar
- plate tectonics simulation:
  Use zero contour of multiscale noise field to modulate heights (gives some boundary-like features).
  Maybe another field to modulate activity level there (subduction vs collision; fall vs raise terrain?)
- coding style is a mess of _-prefixed and not prefixed members.
  Cleanup should include stronger use of accessors.
- Get models into K3D somehow 
  Generating python for K3D's idea of a mesh_source script seems most promising.
  Does seem to allow setting of vertex properties.
  Imported file formats all too limiting, and python API maybe better documented
  than K3D's XML file format.
- Sourceforge tracker reports problems with Beryl/Compiz.
  Try it out now have this working with Debian/lenny.
- Export Ogre .xml mesh files:
  http://www.ogre3d.org/wiki/index.php/Creating_a_triangle_strip
  http://www.ogre3d.org/phpBB2/viewtopic.php?p=228739#228739
  http://www.ogre3d.org/wiki/index.php/Ogre_meshxml_DTD
- Debian transitioning Apps to Applications (post Etch) see bug 361418
- Look at Art of Illusion.  Try it's .pov import.
  (It can also import .obj, but that doesn't support per-vertext colour).
- Texture export should have the option of a .obj file for the DEM.
- Export to wings3d ?  Would probably be via .obj
- If you checkout fracplanet to say fracplanet-0.3.3 then mktgz script doesn't like it.
  (Not clear how useful this is in practice because you wouldn't tag it in cvs without building
  tgz first to check testtgz and mkdeb; maybe something like -0.3.3rc1 though ?).
- .debs should create a menu entry.
  They do, but yada bug (Debian #419878) getting in the way.
  Doesn't work on Ubuntu either (install to wrong dir? no update menu?)
- DEB_BUILD_OPTIONS should also recognize debug ? (and do same as noopt probably)
  It's not actually in the policy manual.
- Check clouds tab's documentation.
- More control over clouds.
- Texture render should also output a specular map for celestia.
- Add an option to load vertex heights from a DEM
  (would replace mid-point perturbation during subdivision;
  would retain our colouring rules, ability to add noise, rivers etc).
- Texture render for clouds.
  Will end up with duplicate code in cloud mesh's ScanConvertHelper; use boost MPL/Fusion
  to produce generic version operating on general tuples ?
- Craters.
- X gets bigger when using display lists (remote only?) ?  Need to delete on exit ?
- Find out what the errors are this guy mentions:
    http://douglas.nerad.org/journal/2006/04/03/
- More control over weather and clouds.
- Another noise fn to modulate (c.f add) subdivided terrain.
  Might help reduce middle-of-continent highlands.
- Another noise fn to modulate power law
  (could get a mix of highland mesas and deposited lowlands).
- Use Qtime (getCurrentTime) instead of time (more portable ?).
- Abort on progress bar (throw exception out to top level ?  Hmmm)
- Make colours depend on more interesting things than height (e.g slope)
- Reshow, so don't need to regenerate after hiding viewer
- Save to texture with shading for spheres should have the option of some
  sort of "atlas shading": effectively local illumination giving
  impression terrain has been "unpeeled" then illuminated.
- Does POV-Ray mesh support given vertex normals ?
  Renderings show facet shading with smooth colouring, which is
  legitimate but maybe not what's wanted.
  (Hmmm can't actually remember how fracplanet does this but it doesn't
  show facets).
- Move blender/pov save parameters into nested classes,
  pass parameters into lowest-level save fns rather than multiple args.
- Scale parameter for blender output.
- Ability to load/save fracplanet parameters (simple keyword=value text file)
- Mesh optimisation.
- Save clouds as some more blender-friendly texture type thing.
- Rename Save to Export.
  (Eventually want Save/Load/Export POV-Ray/Export Blender/Export Texture/Import Texture).
- Cloud controls.  Noise parameters and thresholds.
- More control over cloud undersides, shadowing etc (c.f on/off in POVRay).
  (Add checkboxes to POVRay save dialog).
  Maybe need better control over ambient, or actually use the ambient
  parameter on the render tab (move to colours).  Then shadows
  wouldn't be black; wouldn't get a night-side though, without varying
  ambient around sphere.
- Give cloud illusion of depth using GLSL (parallax effects).
- Use GLSL to get hard edged rivers.
  Not so useful without some way of exporting to PovRay/Blender (texture and texture co-ords?)
- Shadows of clouds on ground in OpenGL (needs shaders, shadow buffers etc).
- Optimise matix33 inversion
- End abuse of alpha as flag; just use it as the emissive quantity.
  Mesh then gets a flag for meaning of alpha channels.
- Terrain patches but with planetary geometry (ie curvature).
  This would give a sensible horizon when near the centre of the patch.
- Control over treeline and shoreline heights (these are hardwired currently).
- Clean up progress stuff; push steps->% (rate management) into progress API.
- std::auto_ptr sucks; use something better from boost
- Add perturbation decay rate for subdivision too.
- Noise perturbation in X&Y too;
  might help break up subdivision ridge artefacts
- Basic "man" page besides HTML
- Make more keys do stuff in fly mode (e.g home to return to start).
- Console mode app: read parameters, generate planet.
- Fix river/lake hang for high subdivision levels
- Perlin noise to modify terrain colours.
- Continue GUI procesing when progressing.
- More feedback (progress bar?) when building display list
  (unfortunately a lot of the delay happens in OpenGL when the list is completed)
- Borrow some improvements from sister evolvotron project
- Check for OpenGL errors
- Add control over heights at which colours switch.
- Improve code documentation.
- Save/load parameters.  Automatic mode (load parameters, generate model, exit).
- Seasonal variations.
  e.g snowline, ice packs on ocean.
- Ability to save sequences of models
  (probably by offline generation for parameter file load)
- Are we 64bit ready ?  Onwards to subdivision levels 12,13,14...
- Put ONLY the terrain data in the .inc file; rest in .pov or a different .inc
- Split up mesh file (3 parts: vertices, colours, meshing)
- Ringworld and Dyson sphere/hollow-Earth starting geometries for fun.
- yafray export (note povray not available for sparc, but yafray is)

Could do, but rejected:
- Build for ultrasparc 
  ./configure 'QMAKE_CXXFLAGS_RELEASE += -mcpu=ultrasparc'
  but it's no faster
